{"version":3,"file":"static/js/343.1c1d6053.chunk.js","mappings":"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","sources":["config/api.ts","components/LiveTestAutomation.tsx","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["const API_BASE_URL = 'https://about-me-automation-backend.azurewebsites.net/api';\n\nexport const fetchWithErrorHandling = async (url: string) => {\n    const response = await fetch(url);\n    if (!response.ok) {\n        const text = await response.text();\n        try {\n            // Try to parse error as JSON\n            const json = JSON.parse(text);\n            throw new Error(json.message || `HTTP error! status: ${response.status}`);\n        } catch (e) {\n            // If parsing fails, use text or status\n            throw new Error(text || `HTTP error! status: ${response.status}`);\n        }\n    }\n    return response.json();\n};\n\nexport const API_ENDPOINTS = {\n    TEST_RUNS_SUMMARY: `${API_BASE_URL}/test-runs/summary`,\n    TEST_RUN_DETAILS: (id: string) => `${API_BASE_URL}/test-runs/${id}`\n};\n","import React, { useState, useEffect } from 'react';\nimport styled, { keyframes, css } from 'styled-components';\nimport { API_ENDPOINTS, fetchWithErrorHandling } from '../config/api';\n\ninterface TestRun {\n    _id: string;\n    project: string;\n    status: string;\n    startedAt: string;\n    finishedAt: string;\n    results: {\n        passed: number;\n        failed: number;\n        skipped?: number;\n        blocked?: number;\n        tests?: Array<{\n            suite: string;\n            title: string;\n            status: string;\n            browser: string;\n            duration: number;\n            error?: string;\n        }>;\n        details?: Array<{\n            suite: string;\n            tests: Array<{\n                name: string;\n                status: string;\n                browser?: string;\n                duration?: number;\n                error?: string;\n            }>;\n        }>;\n    };\n}\n\ninterface TestRunDetail extends TestRun {\n    duration: number;\n    results: TestRun['results'];\n}\n\ninterface LiveTestAutomationProps {\n    isDark: boolean;\n}\n\nconst TestAutomationSection = styled.section`\n    padding: 2rem;\n    max-width: 1200px;\n    margin: 0 auto;\n    width: 100%;\n    overflow-x: hidden;\n    box-sizing: border-box;\n\n    @media (max-width: 768px) {\n        padding: 1rem;\n    }\n`;\n\nconst TestRunList = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    min-height: 400px; /* Ensure consistent height even when loading */\n    width: 100%;\n    overflow-x: hidden;\n    box-sizing: border-box;\n`;\n\nconst TestRunCard = styled.div<{ $isDark: boolean }>`\n    background-color: ${props => props.$isDark ? 'transparent' : 'white'};\n    border-radius: 8px;\n    box-shadow: ${props => props.$isDark ? 'none' : '0 2px 4px rgba(0, 0, 0, 0.1)'};\n    overflow: hidden;\n`;\n\nconst getStatusColor = (status: string, passed: number, failed: number, isDark: boolean) => {\n    if (status === 'completed' || status === 'passed') {\n        if (failed === 0 && passed > 0) return isDark ? 'rgb(20, 83, 45)' : '#27ae60'; // Green for all passed in dark mode\n        if (failed > 0 && passed > 0) return isDark ? '#b45309' : '#f39c12'; // Darker orange for dark mode\n        if (failed > 0 && passed === 0) return isDark ? '#b91c1c' : '#e74c3c'; // Darker red for dark mode\n    }\n    return isDark ? '#374151' : '#7f8c8d'; // Grey for other statuses\n};\n\nconst TestRunHeader = styled.div<{ status: string; passed: number; failed: number; $isDark: boolean }>`\n    background-color: ${props => getStatusColor(props.status, props.passed, props.failed, props.$isDark)};\n    color: white;\n    padding: 1rem;\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    @media (max-width: 768px) {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 0.5rem;\n    }\n`;\n\nconst ChevronIcon = styled.span<{ isExpanded: boolean }>`\n    display: inline-block;\n    margin-right: 0.5rem;\n    transition: transform 0.3s ease;\n    transform: ${props => props.isExpanded ? 'rotate(-180deg)' : 'rotate(0)'};\n    font-size: 0.8rem;\n`;\n\nconst TestRunTitleWrapper = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst TestRunTitle = styled.h3`\n    margin: 0;\n    font-size: 1.2rem;\n\n    @media (max-width: 768px) {\n        font-size: 1rem;\n    }\n`;\n\nconst TestRunStats = styled.div`\n    display: flex;\n    gap: 1rem;\n\n    @media (max-width: 768px) {\n        flex-wrap: wrap;\n        gap: 0.75rem;\n    }\n`;\n\nconst StatItem = styled.div`\n    display: flex;\n    align-items: center;\n    gap: 0.25rem;\n\n    @media (max-width: 768px) {\n        font-size: 0.9rem;\n    }\n`;\n\nconst TestRunContent = styled.div<{ isExpanded: boolean; $isDark: boolean }>`\n    height: auto;\n    max-height: ${props => props.isExpanded ? 'none' : '0'};\n    overflow: hidden;\n    transition: padding 0.3s ease-in-out, background-color 0.3s;\n    padding: ${props => props.isExpanded ? '1rem' : '0'};\n    background-color: ${props => props.$isDark ? '#23272f' : '#fff'};\n    \n    @media (max-width: 768px) {\n        padding: ${props => props.isExpanded ? '0.75rem' : '0'};\n    }\n`;\n\nconst ErrorMessage = styled.div`\n    text-align: center;\n    padding: 2rem;\n    color: #e74c3c;\n    font-size: 1.2rem;\n`;\n\nconst fadeInAnimation = keyframes`\n    0% {\n        opacity: 0;\n        transform: translateY(10px);\n    }\n    100% {\n        opacity: 1;\n        transform: translateY(0);\n    }\n`;\n\nconst fadeIn = keyframes`\n    from { opacity: 0; }\n    to { opacity: 1; }\n`;\n\nconst shimmerAnimation = keyframes`\n    0% {\n        background-position: -1200px 0;\n    }\n    100% {\n        background-position: 1200px 0;\n    }\n`;\n\nconst shimmerStyle = css<{ $isDark?: boolean }>`\n    background: linear-gradient(to right, ${props => props.$isDark ? '#23272f 8%, #374151 18%, #23272f 33%' : '#f6f7f8 8%, #edeef1 18%, #f6f7f8 33%'});\n    background-size: 2400px 100%;\n    animation: ${shimmerAnimation} 1.5s linear infinite;\n`;\n\nconst LoadingCard = styled.div<{ index: number; $isDark: boolean }>`\n    background-color: ${props => props.$isDark ? '#23272f' : 'white'};\n    border-radius: 8px;\n    box-shadow: 0 2px 4px ${props => props.$isDark ? 'rgba(0,0,0,0.5)' : 'rgba(0,0,0,0.1)'};\n    overflow: hidden;\n    opacity: 0;\n    animation: ${fadeInAnimation} 0.5s ease forwards;\n    animation-delay: ${props => props.index * 0.1}s;\n    \n    @media (max-width: 768px) {\n        height: auto;\n    }\n`;\n\nconst LoadingHeader = styled.div<{ $isDark: boolean }>`\n    height: 60px;\n    background-color: ${props => props.$isDark ? '#23272f' : '#f8f8f8'};\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem;\n    position: relative;\n\n    @media (max-width: 768px) {\n        height: auto;\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 0.5rem;\n        min-height: 80px;\n    }\n`;\n\nconst LoadingTitle = styled.div`\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n`;\n\nconst LoadingProjectIcon = styled.div<{ $isDark: boolean }>`\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    ${shimmerStyle}\n`;\n\nconst LoadingProjectName = styled.div<{ $isDark: boolean }>`\n    width: 120px;\n    height: 20px;\n    ${shimmerStyle}\n    border-radius: 4px;\n`;\n\nconst LoadingStats = styled.div`\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n\n    @media (max-width: 768px) {\n        flex-wrap: wrap;\n        gap: 0.75rem;\n    }\n`;\n\nconst LoadingStatWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n`;\n\nconst LoadingStatIcon = styled.div<{ type: 'pass' | 'fail' | 'date'; $isDark: boolean }>`\n    width: 16px;\n    height: 16px;\n    border-radius: ${props => props.type === 'date' ? '3px' : '50%'};\n    ${shimmerStyle}\n`;\n\nconst LoadingStatValue = styled.div<{ width: string; $isDark: boolean }>`\n    width: ${props => props.width};\n    height: 16px;\n    ${shimmerStyle}\n    border-radius: 3px;\n`;\n\nconst LoadingPlaceholder = () => (\n    <TestRunList data-testid=\"loading-placeholder\">\n        {[1, 2, 3, 4, 5].map((_, index) => (\n            <LoadingCard key={index} index={index} $isDark={true}>\n                <LoadingHeader $isDark={true}>\n                    <LoadingTitle>\n                        <LoadingProjectIcon $isDark={true} />\n                        <LoadingProjectName $isDark={true} />\n                    </LoadingTitle>\n                    <LoadingStats>\n                        <LoadingStatWrapper>\n                            <LoadingStatIcon type=\"pass\" $isDark={true} />\n                            <LoadingStatValue width=\"24px\" $isDark={true} />\n                        </LoadingStatWrapper>\n                        <LoadingStatWrapper>\n                            <LoadingStatIcon type=\"fail\" $isDark={true} />\n                            <LoadingStatValue width=\"24px\" $isDark={true} />\n                        </LoadingStatWrapper>\n                        <LoadingStatWrapper>\n                            <LoadingStatIcon type=\"date\" $isDark={true} />\n                            <LoadingStatValue width=\"120px\" $isDark={true} />\n                        </LoadingStatWrapper>\n                    </LoadingStats>\n                </LoadingHeader>\n            </LoadingCard>\n        ))}\n    </TestRunList>\n);\n\nconst LoadingExpandedContent = styled.div`\n    animation: ${fadeInAnimation} 0.3s ease-in-out;\n`;\n\nconst LoadingTestSummary = styled.div<{ $isDark: boolean }>`\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 1rem;\n    margin-bottom: 1rem;\n    background-color: ${props => props.$isDark ? '#23272f' : '#f8fafc'};\n    padding: 0.75rem;\n    border-radius: 6px;\n\n    @media (max-width: 768px) {\n        grid-template-columns: repeat(2, 1fr);\n        gap: 0.75rem;\n        padding: 0.75rem;\n    }\n`;\n\nconst LoadingSummaryItem = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 0.25rem;\n\n    @media (max-width: 768px) {\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n    }\n`;\n\nconst LoadingSummaryLabel = styled.div<{ $isDark: boolean }>`\n    height: 0.8rem;\n    width: 60%;\n    border-radius: 4px;\n    ${shimmerStyle}\n\n    @media (max-width: 768px) {\n        width: 40%;\n    }\n`;\n\nconst LoadingSummaryValue = styled.div<{ $isDark: boolean }>`\n    height: 0.9rem;\n    width: 80%;\n    border-radius: 4px;\n    ${shimmerStyle}\n\n    @media (max-width: 768px) {\n        width: 50%;\n    }\n`;\n\nconst LoadingTestDetails = styled.div`\n    margin-top: 0.5rem;\n`;\n\nconst LoadingTestSuite = styled.div<{ $isDark: boolean }>`\n    margin-bottom: 1rem;\n`;\n\nconst LoadingSuiteTitle = styled.div<{ $isDark: boolean }>`\n    height: 0.95rem;\n    width: 70%;\n    margin: 0.25rem 0;\n    border-radius: 4px;\n    ${shimmerStyle}\n`;\n\nconst LoadingTestCase = styled.div<{ $isDark: boolean }>`\n    height: 2.5rem;\n    padding: 0.5rem;\n    margin: 0.25rem 0;\n    border-radius: 4px;\n    ${shimmerStyle}\n`;\n\nconst formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        timeZoneName: 'short'\n    }).format(date);\n};\n\nconst MAX_RESULTS = 30;\nconst PAGE_SIZE = 5;\n\nconst Spinner = styled.div`\n    border: 3px solid rgba(255,255,255,0.2);\n    border-top: 3px solid #3498db;\n    border-radius: 50%;\n    width: 1.2em;\n    height: 1.2em;\n    animation: spin 0.7s linear infinite;\n    display: inline-block;\n    vertical-align: middle;\n    margin-right: 0.5em;\n\n    @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n    }\n`;\n\nconst LiveTestAutomation: React.FC<LiveTestAutomationProps> = ({ isDark }) => {\n    const [testRuns, setTestRuns] = useState<TestRun[]>([]);\n    const [expandedRuns, setExpandedRuns] = useState<{ [key: string]: TestRunDetail }>({});\n    const [loadingDetails, setLoadingDetails] = useState<{ [key: string]: boolean }>({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n    const [hoveredError, setHoveredError] = useState<{ id: string; error: string } | null>(null);\n    const [limit, setLimit] = useState(PAGE_SIZE);\n    const [loadingMore, setLoadingMore] = useState(false);\n\n    useEffect(() => {\n        fetchTestRuns(limit);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [limit]);\n\n    const fetchTestRuns = async (currentLimit: number) => {\n        setLoading(currentLimit === PAGE_SIZE); // Only show main loader on first load\n        setLoadingMore(currentLimit > PAGE_SIZE); // Show loading more only for subsequent loads\n        try {\n            const url = `${API_ENDPOINTS.TEST_RUNS_SUMMARY}?limit=${currentLimit}`;\n            const data = await fetchWithErrorHandling(url);\n            setTestRuns(data);\n            setError(null);\n        } catch (error: any) {\n            console.error('Fetch error details:', error);\n            setError(`Failed to load test runs: ${error.message || 'Unknown error'}`);\n        } finally {\n            setLoading(false);\n            setLoadingMore(false);\n        }\n    };\n\n    const toggleRunDetails = async (id: string) => {\n        if (expandedRuns[id]) {\n            const newExpandedRuns = { ...expandedRuns };\n            delete newExpandedRuns[id];\n            setExpandedRuns(newExpandedRuns);\n            return;\n        }\n\n        // Set loading state immediately\n        setLoadingDetails(prev => ({ ...prev, [id]: true }));\n\n        try {\n            const data = await fetchWithErrorHandling(API_ENDPOINTS.TEST_RUN_DETAILS(id));\n            setExpandedRuns(prev => ({\n                ...prev,\n                [id]: data\n            }));\n        } catch (err) {\n            setError('Failed to load test run details. Please try again.');\n        } finally {\n            setLoadingDetails(prev => {\n                const next = { ...prev };\n                delete next[id];\n                return next;\n            });\n        }\n    };\n\n    const renderLoadingExpandedContent = () => (\n        <LoadingExpandedContent>\n            <LoadingTestSummary $isDark={isDark}>\n                {Array(8).fill(null).map((_, index) => (\n                    <LoadingSummaryItem key={index}>\n                        <LoadingSummaryLabel $isDark={isDark} />\n                        <LoadingSummaryValue $isDark={isDark} />\n                    </LoadingSummaryItem>\n                ))}\n            </LoadingTestSummary>\n            <LoadingTestDetails>\n                {Array(3).fill(null).map((_, suiteIndex) => (\n                    <LoadingTestSuite key={suiteIndex} $isDark={isDark}>\n                        <LoadingSuiteTitle $isDark={isDark} />\n                        {Array(2).fill(null).map((_, caseIndex) => (\n                            <LoadingTestCase key={caseIndex} $isDark={isDark} />\n                        ))}\n                    </LoadingTestSuite>\n                ))}\n            </LoadingTestDetails>\n        </LoadingExpandedContent>\n    );\n\n    const getErrorMessage = (error: any): string => {\n        if (!error) return '';\n        if (typeof error === 'string') return error;\n        if (typeof error === 'object') {\n            if (error.message) return error.message;\n            try {\n                return JSON.stringify(error);\n            } catch {\n                return 'Unknown error';\n            }\n        }\n        return String(error);\n    };\n\n    const renderTestCase = (test: any, index: string | number, runId: string) => (\n        <TestCase key={`${runId}-${index}`} status={test.status} $isDark={isDark}>\n            <ErrorWrapper>\n                <TestInfo>\n                    <TestName\n                        status={test.status}\n                        $isDark={isDark}\n                        onMouseEnter={() => test.error && setHoveredError({\n                            id: `${runId}-${index}`,\n                            error: getErrorMessage(test.error)\n                        })}\n                        onMouseLeave={() => setHoveredError(null)}\n                    >\n                        {test.title || test.name}\n                    </TestName>\n                    <TestMeta>\n                        <TestBrowser>\n                            {test.browser === 'chromium' ? '🌐' : '📱'} {test.browser || 'chromium'}\n                        </TestBrowser>\n                        <TestDuration>{test.duration ? `${(test.duration / 1000).toFixed(2)}s` : 'N/A'}</TestDuration>\n                    </TestMeta>\n                </TestInfo>\n                {hoveredError?.id === `${runId}-${index}` && (\n                    <Tooltip>{hoveredError.error}</Tooltip>\n                )}\n            </ErrorWrapper>\n        </TestCase>\n    );\n\n    if (loading) {\n        return (\n            <TestAutomationSection>\n                <LoadingPlaceholder />\n            </TestAutomationSection>\n        );\n    }\n\n    if (error) {\n        return (\n            <TestAutomationSection>\n                <ErrorMessage>{error}</ErrorMessage>\n            </TestAutomationSection>\n        );\n    }\n\n    const canLoadMore = testRuns.length >= limit && limit < MAX_RESULTS;\n\n    return (\n        <TestAutomationSection data-testid=\"test-automation-section\">\n            <TestRunList data-testid=\"test-run-list\">\n                {testRuns.map((run) => (\n                    <TestRunCard key={run._id} data-testid={`test-run-card-${run._id}`} $isDark={isDark}>\n                        <TestRunHeader\n                            status={run.status}\n                            passed={run.results.passed}\n                            failed={run.results.failed}\n                            $isDark={isDark}\n                            onClick={() => toggleRunDetails(run._id)}\n                            data-testid={`test-run-header-${run._id}`}\n                        >\n                            <TestRunTitleWrapper>\n                                <ChevronIcon isExpanded={!!expandedRuns[run._id] || !!loadingDetails[run._id]}>▼</ChevronIcon>\n                                <TestRunTitle>{run.project}</TestRunTitle>\n                            </TestRunTitleWrapper>\n                            <TestRunStats>\n                                <StatItem>✅ {run.results.passed}</StatItem>\n                                <StatItem>❌ {run.results.failed}</StatItem>\n                                <StatItem>{formatDate(run.startedAt)}</StatItem>\n                            </TestRunStats>\n                        </TestRunHeader>\n                        <TestRunContent data-testid=\"test-run-content\" isExpanded={!!expandedRuns[run._id] || !!loadingDetails[run._id]} $isDark={isDark}>\n                            {loadingDetails[run._id] && renderLoadingExpandedContent()}\n                            {expandedRuns[run._id] && (\n                                <ExpandedContent data-testid={`expanded-content-${run._id}`}>\n                                    <TestSummary data-testid={`test-summary-${run._id}`} $isDark={isDark}>\n                                        <SummaryItem data-testid=\"test-run-duration\">\n                                            <SummaryLabel>Duration</SummaryLabel>\n                                            <SummaryValue>{(expandedRuns[run._id].duration / 1000).toFixed(2)}s</SummaryValue>\n                                        </SummaryItem>\n                                        <SummaryItem data-testid=\"test-run-success-rate\">\n                                            <SummaryLabel>Success Rate</SummaryLabel>\n                                            <SummaryValue>\n                                                {Math.round((expandedRuns[run._id].results.passed /\n                                                    (expandedRuns[run._id].results.passed + expandedRuns[run._id].results.failed)) * 100)}%\n                                            </SummaryValue>\n                                        </SummaryItem>\n                                        <SummaryItem data-testid=\"test-run-passed-tests\">\n                                            <SummaryLabel>Passed Tests</SummaryLabel>\n                                            <SummaryValue>{expandedRuns[run._id].results.passed}</SummaryValue>\n                                        </SummaryItem>\n                                        <SummaryItem data-testid=\"test-run-failed-tests\">\n                                            <SummaryLabel>Failed Tests</SummaryLabel>\n                                            <SummaryValue>{expandedRuns[run._id].results.failed}</SummaryValue>\n                                        </SummaryItem>\n                                        <SummaryItem>\n                                            <SummaryLabel>Skipped Tests</SummaryLabel>\n                                            <SummaryValue>{expandedRuns[run._id].results.skipped || 0}</SummaryValue>\n                                        </SummaryItem>\n                                        <SummaryItem>\n                                            <SummaryLabel>Blocked Tests</SummaryLabel>\n                                            <SummaryValue>{expandedRuns[run._id].results.blocked || 0}</SummaryValue>\n                                        </SummaryItem>\n                                    </TestSummary>\n                                    <TestDetails data-testid={`test-details-${run._id}`}>\n                                        {expandedRuns[run._id].results.tests?.map((test: any, index: number) => (\n                                            <TestSuite data-testid={`test-suite-${run._id}`} key={index} $isDark={isDark}>\n                                                <SuiteTitle data-testid={`test-suite-title-${run._id}`} $isDark={isDark}>{test.suite}</SuiteTitle>\n                                                <TestCase status={test.status} $isDark={isDark}>\n                                                    <ErrorWrapper>\n                                                        <TestInfo>\n                                                            <TestName status={test.status} $isDark={isDark}\n                                                                onMouseEnter={() => test.error && setHoveredError({\n                                                                    id: `${run._id}-${index}`,\n                                                                    error: getErrorMessage(test.error)\n                                                                })}\n                                                                onMouseLeave={() => setHoveredError(null)}\n                                                            >\n                                                                {test.title || test.name}\n                                                            </TestName>\n                                                            <TestMeta>\n                                                                <TestBrowser>\n                                                                    {test.browser === 'chromium' ? '🌐' : '📱'} {test.browser || 'chromium'}\n                                                                </TestBrowser>\n                                                                <TestDuration>{test.duration ? `${(test.duration / 1000).toFixed(2)}s` : 'N/A'}</TestDuration>\n                                                            </TestMeta>\n                                                        </TestInfo>\n                                                        {hoveredError?.id === `${run._id}-${index}` && (\n                                                            <Tooltip>{hoveredError.error}</Tooltip>\n                                                        )}\n                                                    </ErrorWrapper>\n                                                </TestCase>\n                                            </TestSuite>\n                                        ))}\n                                        {expandedRuns[run._id].results.details?.map((suite: any, suiteIndex: number) => (\n                                            <TestSuite key={`detail-${suiteIndex}`} $isDark={isDark}>\n                                                <SuiteTitle $isDark={isDark}>{suite.suite}</SuiteTitle>\n                                                {suite.tests?.map((test: any, testIndex: number) =>\n                                                    renderTestCase(test, `${suiteIndex}-${testIndex}`, run._id)\n                                                )}\n                                            </TestSuite>\n                                        ))}\n                                    </TestDetails>\n                                </ExpandedContent>\n                            )}\n                        </TestRunContent>\n                    </TestRunCard>\n                ))}\n                {(canLoadMore || loadingMore) && (\n                    <LoadMoreWrapper>\n                        <LoadMoreButton\n                            onClick={() => setLimit(l => Math.min(l + PAGE_SIZE, MAX_RESULTS))}\n                            disabled={loadingMore}\n                            $isDark={isDark}\n                            data-testid=\"load-more-button\"\n                        >\n                            {loadingMore ? <><Spinner />Loading...</> : 'Load more results'}\n                        </LoadMoreButton>\n                    </LoadMoreWrapper>\n                )}\n            </TestRunList>\n        </TestAutomationSection>\n    );\n};\n\nconst ExpandedContent = styled.div`\n    margin-top: 0.5rem;\n    animation: ${fadeInAnimation} 0.3s ease-in-out;\n`;\n\nconst TestSummary = styled.div<{ $isDark: boolean }>`\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 1rem;\n    margin-bottom: 1rem;\n    background-color: ${props => props.$isDark ? '#23272f' : '#f8fafc'};\n    color: ${props => props.$isDark ? '#ecf0f1' : '#2c3e50'};\n    padding: 1rem;\n    border-radius: 6px;\n\n    @media (max-width: 768px) {\n        grid-template-columns: repeat(2, 1fr);\n        gap: 0.75rem;\n        padding: 0.75rem;\n    }\n`;\n\nconst SummaryItem = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 0.25rem;\n\n    @media (max-width: 768px) {\n        font-size: 0.9rem;\n    }\n`;\n\nconst SummaryLabel = styled.div`\n    color: #64748b;\n    font-size: 0.9rem;\n\n    @media (max-width: 768px) {\n        font-size: 0.8rem;\n    }\n`;\n\nconst SummaryValue = styled.div`\n    font-size: 1.1rem;\n    font-weight: 500;\n\n    @media (max-width: 768px) {\n        font-size: 0.9rem;\n    }\n`;\n\nconst TestDetails = styled.div`\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 1rem;\n    margin-top: 1rem;\n\n    @media (max-width: 768px) {\n        grid-template-columns: 1fr;\n        gap: 0.75rem;\n    }\n`;\n\nconst TestSuite = styled.div<{ $isDark: boolean }>`\n    background-color: ${props => props.$isDark ? '#23272f' : '#f8fafc'};\n    color: ${props => props.$isDark ? '#ecf0f1' : '#2c3e50'};\n    padding: 1rem;\n    border-radius: 6px;\n\n    @media (max-width: 768px) {\n        padding: 0.75rem;\n    }\n`;\n\nconst SuiteTitle = styled.h4<{ $isDark: boolean }>`\n    color: ${props => props.$isDark ? '#f3f4f6' : '#2c3e50'};\n    margin: 0 0 0.75rem;\n    font-size: 1.1rem;\n    border-bottom: 1px solid ${props => props.$isDark ? '#374151' : '#e2e8f0'};\n    padding-bottom: 0.5rem;\n\n    @media (max-width: 768px) {\n        font-size: 1rem;\n        margin-bottom: 0.5rem;\n    }\n`;\n\nconst TestCase = styled.div<{ status: string; $isDark: boolean }>`\n    padding: 0.75rem;\n    margin: 0.5rem 0;\n    border-radius: 4px;\n    position: relative;\n    background-color: ${props => {\n        if (props.$isDark) {\n            if (props.status === 'passed') return '#14532d';\n            if (props.status === 'failed') return '#7f1d1d';\n            if (props.status === 'skipped') return '#23272f';\n            return '#23272f';\n        } else {\n            if (props.status === 'passed') return '#f0fdf4';\n            if (props.status === 'failed') return '#fef2f2';\n            if (props.status === 'skipped') return '#f8fafc';\n            return '#fff';\n        }\n    }};\n    border: 1px solid ${props => {\n        if (props.$isDark) {\n            if (props.status === 'passed') return '#22c55e';\n            if (props.status === 'failed') return '#ef4444';\n            if (props.status === 'skipped') return '#374151';\n            return '#374151';\n        } else {\n            if (props.status === 'passed') return '#86efac';\n            if (props.status === 'failed') return '#fecaca';\n            if (props.status === 'skipped') return '#e2e8f0';\n            return '#e2e8f0';\n        }\n    }};\n    color: ${props => props.$isDark ? '#ecf0f1' : '#1e293b'};\n\n    @media (max-width: 768px) {\n        padding: 0.6rem;\n        margin: 0.4rem 0;\n    }\n`;\n\nconst TestInfo = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    gap: 1rem;\n    position: relative;\n    flex-wrap: wrap;\n\n    @media (max-width: 768px) {\n        flex-direction: column;\n        gap: 0.5rem;\n    }\n`;\n\nconst TestName = styled.div<{ status: string; $isDark: boolean }>`\n    font-size: 0.95rem;\n    color: ${props => props.$isDark ? '#ecf0f1' : '#1e293b'};\n    flex: 1;\n    min-width: 200px;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    cursor: ${props => props.status === 'failed' ? 'help' : 'default'};\n\n    &::before {\n        content: \"${props => props.status === 'passed' ? '✓' : props.status === 'failed' ? '✘' : ''}\";\n        color: ${props => {\n            if (props.status === 'passed') return props.$isDark ? '#22c55e' : '#16a34a';\n            if (props.status === 'failed') return props.$isDark ? '#ef4444' : '#dc2626';\n            return props.$isDark ? '#ecf0f1' : 'inherit';\n        }};\n        font-weight: bold;\n    }\n\n    @media (max-width: 768px) {\n        font-size: 0.9rem;\n    }\n`;\n\nconst TestMeta = styled.div`\n    display: flex;\n    gap: 1rem;\n    color: #64748b;\n    font-size: 0.9rem;\n    white-space: nowrap;\n    margin-left: auto;\n\n    @media (max-width: 768px) {\n        font-size: 0.85rem;\n        gap: 0.75rem;\n        margin-left: 1.5rem; // Align with the test name after the ✓/✘ icon\n    }\n`;\n\nconst TestBrowser = styled.span`\n    display: flex;\n    align-items: center;\n    gap: 0.25rem;\n`;\n\nconst TestDuration = styled.span`\n    color: #64748b;\n`;\n\nconst Tooltip = styled.div`\n    position: absolute;\n    top: 100%;\n    left: 0;\n    right: 0;\n    background-color: #fee2e2;\n    border: 1px solid #fecaca;\n    color: #dc2626;\n    padding: 0.75rem;\n    border-radius: 4px;\n    font-size: 0.85rem;\n    margin-top: 0.5rem;\n    z-index: 10;\n    white-space: pre-wrap;\n    width: 100%;\n    max-width: 100vw;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    animation: ${fadeIn} 0.2s ease-in-out;\n    max-height: calc(100vh - 300px); // Dynamic height based on viewport\n    overflow-y: auto;\n    overflow-x: hidden; // Prevent horizontal scroll\n    font-family: monospace; // Better for error messages\n\n    &::before {\n        content: '';\n        position: absolute;\n        top: -6px;\n        left: 16px;\n        width: 10px;\n        height: 10px;\n        background: #fee2e2;\n        border-left: 1px solid #fecaca;\n        border-top: 1px solid #fecaca;\n        transform: rotate(45deg);\n    }\n\n    @media (max-width: 768px) {\n        font-size: 0.8rem;\n        padding: 0.6rem;\n        width: 100%;\n    }\n`;\n\nconst ErrorWrapper = styled.div`\n    position: relative;\n    width: 100%;\n`;\n\nconst LoadMoreWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    padding: 1rem;\n`;\n\nconst LoadMoreButton = styled.button<{ $isDark: boolean }>`\n    background-color: ${props => props.$isDark ? '#23272f' : '#f8f8f8'};\n    color: ${props => props.$isDark ? '#ecf0f1' : '#2c3e50'};\n    padding: 0.75rem 1rem;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 1rem;\n    font-weight: 500;\n\n    &:hover {\n        background-color: ${props => props.$isDark ? '#374151' : '#e2e8f0'};\n    }\n\n    &:disabled {\n        background-color: ${props => props.$isDark ? '#374151' : '#e2e8f0'};\n        cursor: not-allowed;\n    }\n`;\n\nexport default LiveTestAutomation;\n","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };"],"names":["API_BASE_URL","fetchWithErrorHandling","async","response","fetch","url","ok","text","json","JSON","parse","Error","message","concat","status","e","API_ENDPOINTS","TEST_RUNS_SUMMARY","TEST_RUN_DETAILS","id","TestAutomationSection","styled","section","_templateObject","_taggedTemplateLiteral","TestRunList","div","_templateObject2","TestRunCard","_templateObject3","props","$isDark","TestRunHeader","_templateObject4","getStatusColor","passed","failed","isDark","ChevronIcon","span","_templateObject5","isExpanded","TestRunTitleWrapper","_templateObject6","TestRunTitle","h3","_templateObject7","TestRunStats","_templateObject8","StatItem","_templateObject9","TestRunContent","_templateObject0","ErrorMessage","_templateObject1","fadeInAnimation","keyframes","_templateObject10","fadeIn","_templateObject11","shimmerAnimation","_templateObject12","shimmerStyle","css","_templateObject13","LoadingCard","_templateObject14","index","LoadingHeader","_templateObject15","LoadingTitle","_templateObject16","LoadingProjectIcon","_templateObject17","LoadingProjectName","_templateObject18","LoadingStats","_templateObject19","LoadingStatWrapper","_templateObject20","LoadingStatIcon","_templateObject21","type","LoadingStatValue","_templateObject22","width","LoadingPlaceholder","_jsx","children","map","_","_jsxs","LoadingExpandedContent","_templateObject23","LoadingTestSummary","_templateObject24","LoadingSummaryItem","_templateObject25","LoadingSummaryLabel","_templateObject26","LoadingSummaryValue","_templateObject27","LoadingTestDetails","_templateObject28","LoadingTestSuite","_templateObject29","LoadingSuiteTitle","_templateObject30","LoadingTestCase","_templateObject31","formatDate","dateString","date","Date","Intl","DateTimeFormat","year","month","day","hour","minute","second","timeZoneName","format","Spinner","_templateObject32","ExpandedContent","_templateObject33","TestSummary","_templateObject34","SummaryItem","_templateObject35","SummaryLabel","_templateObject36","SummaryValue","_templateObject37","TestDetails","_templateObject38","TestSuite","_templateObject39","SuiteTitle","h4","_templateObject40","TestCase","_templateObject41","TestInfo","_templateObject42","TestName","_templateObject43","TestMeta","_templateObject44","TestBrowser","_templateObject45","TestDuration","_templateObject46","Tooltip","_templateObject47","ErrorWrapper","_templateObject48","LoadMoreWrapper","_templateObject49","LoadMoreButton","button","_templateObject50","_ref","testRuns","setTestRuns","useState","expandedRuns","setExpandedRuns","loadingDetails","setLoadingDetails","loading","setLoading","error","setError","hoveredError","setHoveredError","limit","setLimit","loadingMore","setLoadingMore","useEffect","fetchTestRuns","currentLimit","data","console","getErrorMessage","stringify","_unused","String","canLoadMore","length","run","_expandedRuns$run$_id","_expandedRuns$run$_id2","_id","results","onClick","newExpandedRuns","_objectSpread","prev","err","next","toggleRunDetails","project","startedAt","Array","fill","suiteIndex","caseIndex","duration","toFixed","Math","round","skipped","blocked","tests","test","suite","onMouseEnter","onMouseLeave","title","name","browser","details","_suite$tests","testIndex","renderTestCase","runId","l","min","disabled","_Fragment","_typeof","o","Symbol","iterator","constructor","prototype","toPropertyKey","t","i","r","toPrimitive","call","TypeError","Number","_defineProperty","Object","defineProperty","value","enumerable","configurable","writable","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","forEach","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}